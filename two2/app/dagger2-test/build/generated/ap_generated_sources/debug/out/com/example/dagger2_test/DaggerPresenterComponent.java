// Generated by Dagger (https://dagger.dev).
package com.example.dagger2_test;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerPresenterComponent implements PresenterComponent {
  private final PresenterModule presenterModule;

  private final DaggerPresenterComponent presenterComponent = this;

  private DaggerPresenterComponent(PresenterModule presenterModuleParam) {
    this.presenterModule = presenterModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  public static PresenterComponent create() {
    return new Builder().build();
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMPresenter(instance, PresenterModule_ProvidePresenterFactory.providePresenter(presenterModule));
    return instance;
  }

  public static final class Builder {
    private PresenterModule presenterModule;

    private Builder() {
    }

    public Builder presenterModule(PresenterModule presenterModule) {
      this.presenterModule = Preconditions.checkNotNull(presenterModule);
      return this;
    }

    public PresenterComponent build() {
      if (presenterModule == null) {
        this.presenterModule = new PresenterModule();
      }
      return new DaggerPresenterComponent(presenterModule);
    }
  }
}
